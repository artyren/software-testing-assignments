============================= test session starts =============================
platform win32 -- Python 3.11.7, pytest-7.4.4, pluggy-1.3.0
rootdir: C:\Users\Fox\Documents\Skola\software-testing-assignments\A1_unit_testing_students
plugins: regtest-1.5.1
collected 47 items

test_reg_1.py FF.....................EE..............FFFF.FFF            [100%]

=================================== ERRORS ====================================
_________________ ERROR at setup of test_load_change_mock_csv _________________
file C:\Users\Fox\Documents\Skola\software-testing-assignments\A1_unit_testing_students\test_reg_1.py, line 248
  def test_load_change_mock_csv(mock_csv_float_error):
file C:\Users\Fox\Documents\Skola\software-testing-assignments\A1_unit_testing_students\test_reg_1.py, line 222
  @pytest.fixture
  def mock_csv_float_error(mocker):
E       fixture 'mocker' not found
>       available fixtures: LineMatcher, _config_for_test, _pytest, _sys_snapshot, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, copy_csv_file, doctest_namespace, invalid_products_csv_key, linecomp, mock_csv, mock_csv_float_error, mock_csv_float_error2, monkeypatch, pytestconfig, pytester, record_property, record_testsuite_property, record_xml_attribute, recwarn, regtest, testdir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\Fox\Documents\Skola\software-testing-assignments\A1_unit_testing_students\test_reg_1.py:222
____________ ERROR at setup of test_load_change_mock_csv_val_error ____________
file C:\Users\Fox\Documents\Skola\software-testing-assignments\A1_unit_testing_students\test_reg_1.py, line 254
  def test_load_change_mock_csv_val_error(mock_csv_float_error2):
file C:\Users\Fox\Documents\Skola\software-testing-assignments\A1_unit_testing_students\test_reg_1.py, line 227
  @pytest.fixture
  def mock_csv_float_error2(mocker):
E       fixture 'mocker' not found
>       available fixtures: LineMatcher, _config_for_test, _pytest, _sys_snapshot, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, copy_csv_file, doctest_namespace, invalid_products_csv_key, linecomp, mock_csv, mock_csv_float_error, mock_csv_float_error2, monkeypatch, pytestconfig, pytester, record_property, record_testsuite_property, record_xml_attribute, recwarn, regtest, testdir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\Fox\Documents\Skola\software-testing-assignments\A1_unit_testing_students\test_reg_1.py:227
================================== FAILURES ===================================
______________________________ test_convo_route1 ______________________________

capsys = <_pytest.capture.CaptureFixture object at 0x0000015998018750>

    def test_convo_route1(capsys):
        json_file = get_json("users.json")
        with patch('builtins.input', side_effect=["N", "N", "N"]):
            assert login() == None
        captured = capsys.readouterr()
        print(captured.out)
        assert captured.out == "Have a nice day!\n"
>       assert json_file == get_json("users_original.json")
E       AssertionError: assert [{'password':...et': 90}, ...] == [{'password':...et': 90}, ...]
E         At index 14 diff: {'username': 'Oliver', 'password': 'Oliver*123', 'wallet': 55} != {'username': 'Oliver', 'password': 'Oliver*123', 'wallet': 60}
E         Use -v to get more diff

test_reg_1.py:39: AssertionError
---------------------------- Captured stdout call -----------------------------
Have a nice day!

______________________________ test_convo_route2 ______________________________

capsys = <_pytest.capture.CaptureFixture object at 0x000001599801B790>

    def test_convo_route2(capsys):
        json_file = get_json("users.json")
        with patch('builtins.input', side_effect=["Phoenix", "wrong"]):
            assert login() == None
        captured = capsys.readouterr()
        print(captured.out)
        assert captured.out == "Either username or password were incorrect\n"
>       assert json_file == get_json("users_original.json")
E       AssertionError: assert [{'password':...et': 90}, ...] == [{'password':...et': 90}, ...]
E         At index 14 diff: {'username': 'Oliver', 'password': 'Oliver*123', 'wallet': 55} != {'username': 'Oliver', 'password': 'Oliver*123', 'wallet': 60}
E         Use -v to get more diff

test_reg_1.py:48: AssertionError
---------------------------- Captured stdout call -----------------------------
Either username or password were incorrect

______________ test_search_and_buy_product_insufficient_balance _______________

capsys = <_pytest.capture.CaptureFixture object at 0x000001599800C950>

    def test_search_and_buy_product_insufficient_balance(capsys):
        with patch('builtins.input', side_effect=["Luna", "Moonlight#456", 'all', 'y', '54', 'c','y']):
            with pytest.raises(StopIteration):
                searchAndBuyProduct()
        captured = capsys.readouterr()
>       assert "You don't have enough money to complete the purchase.\nPlease try again!" in captured.out
E       assert "You don't have enough money to complete the purchase.\nPlease try again!" in "Successfully logged in\n['Product', 'Price', 'Units']\n['Apple', '2', '10']\n['Banana', '1', '15']\n['Orange', '1.5',...to your cart.\n['Bluetooth Speaker', 30.0, 1]\n\n\nThank you for your purchase, Luna! Your remaining balance is 60.0\n"
E        +  where "Successfully logged in\n['Product', 'Price', 'Units']\n['Apple', '2', '10']\n['Banana', '1', '15']\n['Orange', '1.5',...to your cart.\n['Bluetooth Speaker', 30.0, 1]\n\n\nThank you for your purchase, Luna! Your remaining balance is 60.0\n" = CaptureResult(out="Successfully logged in\n['Product', 'Price', 'Units']\n['Apple', '2', '10']\n['Banana', '1', '15']\...art.\n['Bluetooth Speaker', 30.0, 1]\n\n\nThank you for your purchase, Luna! Your remaining balance is 60.0\n", err='').out

test_reg_1.py:527: AssertionError
_______________________ test_success_one_item_checkout ________________________

capsys = <_pytest.capture.CaptureFixture object at 0x0000015998018DD0>

    def test_success_one_item_checkout(capsys):
        data = get_json("users.json")
        login_info = {"username": "Oliver", "wallet": 60}
    
        # Test item: #59. Blender = 30$
        with patch('builtins.input', side_effect=["59", "c", "y", "l", "y"]):
            checkoutAndPayment(login_info)
    
        captured = capsys.readouterr()
>       assert "Blender added to your cart." in captured.out
E       assert 'Blender added to your cart.' in "1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes - $3.0 - Units: 5\n... try again!\nYour cart is not empty.You have following items\n['Vacuum Cleaner', 100.0, 1]\nYou have been logged out\n"
E        +  where "1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes - $3.0 - Units: 5\n... try again!\nYour cart is not empty.You have following items\n['Vacuum Cleaner', 100.0, 1]\nYou have been logged out\n" = CaptureResult(out="1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes -...n!\nYour cart is not empty.You have following items\n['Vacuum Cleaner', 100.0, 1]\nYou have been logged out\n", err='').out

test_reg_1.py:551: AssertionError
_____________________ test_success_multiple_item_checkout _____________________

capsys = <_pytest.capture.CaptureFixture object at 0x000001599816CA10>

    def test_success_multiple_item_checkout(capsys):
        data = get_json("users.json")
        login_info = {"username": "Oliver", "wallet": 60}
    
        # Test item: #59. Vaccuum Cleaner = 30$
        # Test item: #67. Gloves  =  5$
        with patch('builtins.input', side_effect=["59", "67", "c", "y", "l","y"]):
            checkoutAndPayment(login_info)
    
        captured = capsys.readouterr()
>       assert "Vaccuum Cleaner added to your cart." in captured.out
E       assert 'Vaccuum Cleaner added to your cart.' in "1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes - $3.0 - Units: 5\n... is not empty.You have following items\n['Vacuum Cleaner', 100.0, 1]\n['Umbrella', 7.0, 1]\nYou have been logged out\n"
E        +  where "1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes - $3.0 - Units: 5\n... is not empty.You have following items\n['Vacuum Cleaner', 100.0, 1]\n['Umbrella', 7.0, 1]\nYou have been logged out\n" = CaptureResult(out="1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes -...mpty.You have following items\n['Vacuum Cleaner', 100.0, 1]\n['Umbrella', 7.0, 1]\nYou have been logged out\n", err='').out

test_reg_1.py:572: AssertionError
____________________ test_cancel_logout_forgotten_checkout ____________________

capsys = <_pytest.capture.CaptureFixture object at 0x000001599817A8D0>

    def test_cancel_logout_forgotten_checkout(capsys):
        data = get_json("users.json")
        login_info = {"username": "Oliver", "wallet": 60}
    
        # Test item: #58. Blender = 30$
        with patch('builtins.input', side_effect=["59", "l", "n", "c", "y", "l","y"]):
            checkoutAndPayment(login_info)
    
        captured = capsys.readouterr()
        print(captured.out)
>       assert "Blender added to your cart." in captured.out
E       assert 'Blender added to your cart.' in "1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes - $3.0 - Units: 5\n... try again!\nYour cart is not empty.You have following items\n['Vacuum Cleaner', 100.0, 1]\nYou have been logged out\n"
E        +  where "1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes - $3.0 - Units: 5\n... try again!\nYour cart is not empty.You have following items\n['Vacuum Cleaner', 100.0, 1]\nYou have been logged out\n" = CaptureResult(out="1. Apple - $2.0 - Units: 10\n2. Banana - $1.0 - Units: 15\n3. Orange - $1.5 - Units: 8\n4. Grapes -...n!\nYour cart is not empty.You have following items\n['Vacuum Cleaner', 100.0, 1]\nYou have been logged out\n", err='').out

test_reg_1.py:593: AssertionError
---------------------------- Captured stdout call -----------------------------
1. Apple - $2.0 - Units: 10
2. Banana - $1.0 - Units: 15
3. Orange - $1.5 - Units: 8
4. Grapes - $3.0 - Units: 5
5. Strawberry - $4.0 - Units: 12
6. Watermelon - $10.0 - Units: 1
7. Carrot - $0.5 - Units: 20
8. Broccoli - $1.5 - Units: 10
9. Tomato - $1.0 - Units: 15
10. Cucumber - $1.0 - Units: 12
11. Potato - $0.75 - Units: 18
12. Onion - $0.8 - Units: 20
13. Bell Pepper - $1.2 - Units: 8
14. Lettuce - $2.0 - Units: 5
15. Spinach - $2.5 - Units: 7
16. Milk - $3.0 - Units: 10
17. Eggs - $2.0 - Units: 24
18. Cheese - $5.0 - Units: 8
19. Chicken Breast - $7.0 - Units: 4
20. Salmon - $10.0 - Units: 2
21. Ground Beef - $6.0 - Units: 5
22. Pasta - $1.0 - Units: 15
23. Rice - $1.5 - Units: 10
24. Bread - $2.0 - Units: 8
25. Butter - $3.0 - Units: 6
26. Yogurt - $2.0 - Units: 12
27. Ice Cream - $4.0 - Units: 6
28. Chocolate - $2.5 - Units: 8
29. Coffee - $5.0 - Units: 4
30. Tea - $2.0 - Units: 10
31. Soda - $1.5 - Units: 12
32. Water - $1.0 - Units: 20
33. Juice - $3.0 - Units: 8
34. Chips - $2.5 - Units: 10
35. Cookies - $3.0 - Units: 8
36. Cereal - $2.0 - Units: 12
37. Oatmeal - $1.5 - Units: 15
38. Peanut Butter - $3.0 - Units: 6
39. Jelly - $2.0 - Units: 8
40. Toothpaste - $1.5 - Units: 10
41. Shampoo - $2.0 - Units: 8
42. Soap - $1.0 - Units: 12
43. Toilet Paper - $0.75 - Units: 24
44. Towel - $4.0 - Units: 6
45. Laundry Detergent - $3.5 - Units: 8
46. Dish Soap - $1.5 - Units: 12
47. Broom - $5.0 - Units: 4
48. Trash Bags - $2.0 - Units: 10
49. Light Bulbs - $1.0 - Units: 15
50. Batteries - $3.0 - Units: 6
51. Phone Charger - $5.0 - Units: 4
52. Laptop - $800.0 - Units: 1
53. Headphones - $50.0 - Units: 1
54. TV - $500.0 - Units: 1
55. Microwave - $80.0 - Units: 1
56. Coffee Maker - $40.0 - Units: 1
57. Toaster - $20.0 - Units: 1
58. Blender - $30.0 - Units: 1
59. Vacuum Cleaner - $100.0 - Units: 1
60. Dumbbells - $20.0 - Units: 2
61. Yoga Mat - $15.0 - Units: 1
62. Running Shoes - $60.0 - Units: 1
63. Backpack - $25.0 - Units: 1
64. Sunglasses - $10.0 - Units: 1
65. Hat - $8.0 - Units: 1
66. Gloves - $5.0 - Units: 1
67. Umbrella - $7.0 - Units: 1
68. Notebook - $2.0 - Units: 5
69. Pens - $0.5 - Units: 10
70. Backpack - $15.0 - Units: 1
Vacuum Cleaner added to your cart.
Your cart is not empty.You have following items
['Vacuum Cleaner', 100.0, 1]
['Vacuum Cleaner', 100.0, 1]


You don't have enough money to complete the purchase.
Please try again!
Your cart is not empty.You have following items
['Vacuum Cleaner', 100.0, 1]
You have been logged out

______________________________ test_remove_item _______________________________

capsys = <_pytest.capture.CaptureFixture object at 0x000001599818C450>

    def test_remove_item(capsys):
        data = get_json("users.json")
        login_info = {"username": "Oliver", "wallet": 60}
        pre_products = load_products_from_csv("products.csv")
    
        with patch('builtins.input', side_effect=["52", "r", "2", "r", "f", "r", "1", "l"]):
>           checkoutAndPayment(login_info)

test_reg_1.py:661: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
checkout_and_payment.py:139: in checkoutAndPayment
    ask_logout = logout(cart)
logout.py:12: in logout
    logout_confirmation = input("Do you still want to logout? (Y/N): ").lower()
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='input' id='1484315481168'>
args = ('Do you still want to logout? (Y/N): ',), kwargs = {}
effect = <list_iterator object at 0x00000159980EF1F0>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1185: StopIteration
---------------------------- Captured stdout call -----------------------------
1. Apple - $2.0 - Units: 8
2. Banana - $1.0 - Units: 15
3. Orange - $1.5 - Units: 8
4. Grapes - $3.0 - Units: 5
5. Strawberry - $4.0 - Units: 12
6. Watermelon - $10.0 - Units: 1
7. Carrot - $0.5 - Units: 20
8. Broccoli - $1.5 - Units: 10
9. Tomato - $1.0 - Units: 15
10. Cucumber - $1.0 - Units: 12
11. Potato - $0.75 - Units: 18
12. Onion - $0.8 - Units: 20
13. Bell Pepper - $1.2 - Units: 8
14. Lettuce - $2.0 - Units: 5
15. Spinach - $2.5 - Units: 7
16. Milk - $3.0 - Units: 10
17. Eggs - $2.0 - Units: 24
18. Cheese - $5.0 - Units: 8
19. Chicken Breast - $7.0 - Units: 4
20. Salmon - $10.0 - Units: 2
21. Ground Beef - $6.0 - Units: 5
22. Pasta - $1.0 - Units: 15
23. Rice - $1.5 - Units: 10
24. Bread - $2.0 - Units: 8
25. Butter - $3.0 - Units: 6
26. Yogurt - $2.0 - Units: 12
27. Ice Cream - $4.0 - Units: 6
28. Chocolate - $2.5 - Units: 8
29. Coffee - $5.0 - Units: 4
30. Tea - $2.0 - Units: 10
31. Soda - $1.5 - Units: 12
32. Water - $1.0 - Units: 20
33. Juice - $3.0 - Units: 8
34. Chips - $2.5 - Units: 10
35. Cookies - $3.0 - Units: 8
36. Cereal - $2.0 - Units: 12
37. Oatmeal - $1.5 - Units: 15
38. Peanut Butter - $3.0 - Units: 6
39. Jelly - $2.0 - Units: 8
40. Toothpaste - $1.5 - Units: 10
41. Shampoo - $2.0 - Units: 8
42. Soap - $1.0 - Units: 12
43. Toilet Paper - $0.75 - Units: 24
44. Towel - $4.0 - Units: 6
45. Laundry Detergent - $3.5 - Units: 8
46. Dish Soap - $1.5 - Units: 12
47. Broom - $5.0 - Units: 4
48. Trash Bags - $2.0 - Units: 10
49. Light Bulbs - $1.0 - Units: 15
50. Batteries - $3.0 - Units: 6
51. Phone Charger - $5.0 - Units: 4
52. Laptop - $800.0 - Units: 1
53. Headphones - $50.0 - Units: 1
54. TV - $500.0 - Units: 1
55. Microwave - $80.0 - Units: 1
56. Coffee Maker - $40.0 - Units: 1
57. Toaster - $20.0 - Units: 1
58. Blender - $30.0 - Units: 1
59. Vacuum Cleaner - $100.0 - Units: 1
60. Dumbbells - $20.0 - Units: 2
61. Yoga Mat - $15.0 - Units: 1
62. Running Shoes - $60.0 - Units: 1
63. Backpack - $25.0 - Units: 1
64. Sunglasses - $10.0 - Units: 1
65. Hat - $8.0 - Units: 1
66. Gloves - $5.0 - Units: 1
67. Umbrella - $7.0 - Units: 1
68. Notebook - $2.0 - Units: 5
69. Pens - $0.5 - Units: 10
70. Backpack - $15.0 - Units: 1
Laptop added to your cart.

Invalid input. Please try again.
Banana added to your cart.

Invalid input. Please try again.

Invalid input. Please try again.

Invalid input. Please try again.
Apple added to your cart.
Your cart is not empty.You have following items
['Laptop', 800.0, 1]
['Banana', 1.0, 15]
['Apple', 2.0, 8]
__________________________ test_remove_item_no_items __________________________

capsys = <_pytest.capture.CaptureFixture object at 0x00000159981E82D0>

    def test_remove_item_no_items(capsys):
        data = get_json("users.json")
        login_info = {"username": "Oliver", "wallet": 60}
        pre_products = load_products_from_csv("products.csv")
    
        with patch('builtins.input', side_effect=["r", "2", "l"]):
>           checkoutAndPayment(login_info)

test_reg_1.py:679: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
checkout_and_payment.py:139: in checkoutAndPayment
    ask_logout = logout(cart)
logout.py:12: in logout
    logout_confirmation = input("Do you still want to logout? (Y/N): ").lower()
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='input' id='1484315816720'>
args = ('Do you still want to logout? (Y/N): ',), kwargs = {}
effect = <list_iterator object at 0x00000159980EFC70>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1185: StopIteration
---------------------------- Captured stdout call -----------------------------
1. Apple - $2.0 - Units: 8
2. Banana - $1.0 - Units: 15
3. Orange - $1.5 - Units: 8
4. Grapes - $3.0 - Units: 5
5. Strawberry - $4.0 - Units: 12
6. Watermelon - $10.0 - Units: 1
7. Carrot - $0.5 - Units: 20
8. Broccoli - $1.5 - Units: 10
9. Tomato - $1.0 - Units: 15
10. Cucumber - $1.0 - Units: 12
11. Potato - $0.75 - Units: 18
12. Onion - $0.8 - Units: 20
13. Bell Pepper - $1.2 - Units: 8
14. Lettuce - $2.0 - Units: 5
15. Spinach - $2.5 - Units: 7
16. Milk - $3.0 - Units: 10
17. Eggs - $2.0 - Units: 24
18. Cheese - $5.0 - Units: 8
19. Chicken Breast - $7.0 - Units: 4
20. Salmon - $10.0 - Units: 2
21. Ground Beef - $6.0 - Units: 5
22. Pasta - $1.0 - Units: 15
23. Rice - $1.5 - Units: 10
24. Bread - $2.0 - Units: 8
25. Butter - $3.0 - Units: 6
26. Yogurt - $2.0 - Units: 12
27. Ice Cream - $4.0 - Units: 6
28. Chocolate - $2.5 - Units: 8
29. Coffee - $5.0 - Units: 4
30. Tea - $2.0 - Units: 10
31. Soda - $1.5 - Units: 12
32. Water - $1.0 - Units: 20
33. Juice - $3.0 - Units: 8
34. Chips - $2.5 - Units: 10
35. Cookies - $3.0 - Units: 8
36. Cereal - $2.0 - Units: 12
37. Oatmeal - $1.5 - Units: 15
38. Peanut Butter - $3.0 - Units: 6
39. Jelly - $2.0 - Units: 8
40. Toothpaste - $1.5 - Units: 10
41. Shampoo - $2.0 - Units: 8
42. Soap - $1.0 - Units: 12
43. Toilet Paper - $0.75 - Units: 24
44. Towel - $4.0 - Units: 6
45. Laundry Detergent - $3.5 - Units: 8
46. Dish Soap - $1.5 - Units: 12
47. Broom - $5.0 - Units: 4
48. Trash Bags - $2.0 - Units: 10
49. Light Bulbs - $1.0 - Units: 15
50. Batteries - $3.0 - Units: 6
51. Phone Charger - $5.0 - Units: 4
52. Laptop - $800.0 - Units: 1
53. Headphones - $50.0 - Units: 1
54. TV - $500.0 - Units: 1
55. Microwave - $80.0 - Units: 1
56. Coffee Maker - $40.0 - Units: 1
57. Toaster - $20.0 - Units: 1
58. Blender - $30.0 - Units: 1
59. Vacuum Cleaner - $100.0 - Units: 1
60. Dumbbells - $20.0 - Units: 2
61. Yoga Mat - $15.0 - Units: 1
62. Running Shoes - $60.0 - Units: 1
63. Backpack - $25.0 - Units: 1
64. Sunglasses - $10.0 - Units: 1
65. Hat - $8.0 - Units: 1
66. Gloves - $5.0 - Units: 1
67. Umbrella - $7.0 - Units: 1
68. Notebook - $2.0 - Units: 5
69. Pens - $0.5 - Units: 10
70. Backpack - $15.0 - Units: 1

Invalid input. Please try again.
Banana added to your cart.
Your cart is not empty.You have following items
['Laptop', 800.0, 1]
['Banana', 1.0, 15]
['Apple', 2.0, 8]
['Banana', 1.0, 15]
__________________________ test_remove_item_checkout __________________________

capsys = <_pytest.capture.CaptureFixture object at 0x0000015997B8A690>

    def test_remove_item_checkout(capsys):
        data = get_json("users.json")
        login_info = {"username": "Oliver", "wallet": 60}
        pre_products = load_products_from_csv("products.csv")
    
        with patch('builtins.input', side_effect=["51", "51", "r", "2", "c", "y", "l"]):
>           checkoutAndPayment(login_info)

test_reg_1.py:695: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
checkout_and_payment.py:139: in checkoutAndPayment
    ask_logout = logout(cart)
logout.py:12: in logout
    logout_confirmation = input("Do you still want to logout? (Y/N): ").lower()
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1124: in __call__
    return self._mock_call(*args, **kwargs)
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1128: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='input' id='1484311658064'>
args = ('Do you still want to logout? (Y/N): ',), kwargs = {}
effect = <list_iterator object at 0x000001599800B4F0>

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
>               result = next(effect)
E               StopIteration

C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2032.0_x64__qbz5n2kfra8p0\Lib\unittest\mock.py:1185: StopIteration
---------------------------- Captured stdout call -----------------------------
1. Apple - $2.0 - Units: 8
2. Banana - $1.0 - Units: 15
3. Orange - $1.5 - Units: 8
4. Grapes - $3.0 - Units: 5
5. Strawberry - $4.0 - Units: 12
6. Watermelon - $10.0 - Units: 1
7. Carrot - $0.5 - Units: 20
8. Broccoli - $1.5 - Units: 10
9. Tomato - $1.0 - Units: 15
10. Cucumber - $1.0 - Units: 12
11. Potato - $0.75 - Units: 18
12. Onion - $0.8 - Units: 20
13. Bell Pepper - $1.2 - Units: 8
14. Lettuce - $2.0 - Units: 5
15. Spinach - $2.5 - Units: 7
16. Milk - $3.0 - Units: 10
17. Eggs - $2.0 - Units: 24
18. Cheese - $5.0 - Units: 8
19. Chicken Breast - $7.0 - Units: 4
20. Salmon - $10.0 - Units: 2
21. Ground Beef - $6.0 - Units: 5
22. Pasta - $1.0 - Units: 15
23. Rice - $1.5 - Units: 10
24. Bread - $2.0 - Units: 8
25. Butter - $3.0 - Units: 6
26. Yogurt - $2.0 - Units: 12
27. Ice Cream - $4.0 - Units: 6
28. Chocolate - $2.5 - Units: 8
29. Coffee - $5.0 - Units: 4
30. Tea - $2.0 - Units: 10
31. Soda - $1.5 - Units: 12
32. Water - $1.0 - Units: 20
33. Juice - $3.0 - Units: 8
34. Chips - $2.5 - Units: 10
35. Cookies - $3.0 - Units: 8
36. Cereal - $2.0 - Units: 12
37. Oatmeal - $1.5 - Units: 15
38. Peanut Butter - $3.0 - Units: 6
39. Jelly - $2.0 - Units: 8
40. Toothpaste - $1.5 - Units: 10
41. Shampoo - $2.0 - Units: 8
42. Soap - $1.0 - Units: 12
43. Toilet Paper - $0.75 - Units: 24
44. Towel - $4.0 - Units: 6
45. Laundry Detergent - $3.5 - Units: 8
46. Dish Soap - $1.5 - Units: 12
47. Broom - $5.0 - Units: 4
48. Trash Bags - $2.0 - Units: 10
49. Light Bulbs - $1.0 - Units: 15
50. Batteries - $3.0 - Units: 6
51. Phone Charger - $5.0 - Units: 4
52. Laptop - $800.0 - Units: 1
53. Headphones - $50.0 - Units: 1
54. TV - $500.0 - Units: 1
55. Microwave - $80.0 - Units: 1
56. Coffee Maker - $40.0 - Units: 1
57. Toaster - $20.0 - Units: 1
58. Blender - $30.0 - Units: 1
59. Vacuum Cleaner - $100.0 - Units: 1
60. Dumbbells - $20.0 - Units: 2
61. Yoga Mat - $15.0 - Units: 1
62. Running Shoes - $60.0 - Units: 1
63. Backpack - $25.0 - Units: 1
64. Sunglasses - $10.0 - Units: 1
65. Hat - $8.0 - Units: 1
66. Gloves - $5.0 - Units: 1
67. Umbrella - $7.0 - Units: 1
68. Notebook - $2.0 - Units: 5
69. Pens - $0.5 - Units: 10
70. Backpack - $15.0 - Units: 1
Phone Charger added to your cart.
Phone Charger added to your cart.

Invalid input. Please try again.
Banana added to your cart.
['Laptop', 800.0, 1]
['Banana', 1.0, 15]
['Apple', 2.0, 8]
['Banana', 1.0, 15]
['Phone Charger', 5.0, 4]
['Phone Charger', 5.0, 4]
['Banana', 1.0, 15]


You don't have enough money to complete the purchase.
Please try again!
Your cart is not empty.You have following items
['Laptop', 800.0, 1]
['Banana', 1.0, 15]
['Apple', 2.0, 8]
['Banana', 1.0, 15]
['Phone Charger', 5.0, 4]
['Phone Charger', 5.0, 4]
['Banana', 1.0, 15]
=========================== short test summary info ===========================
FAILED test_reg_1.py::test_convo_route1 - AssertionError: assert [{'password'...
FAILED test_reg_1.py::test_convo_route2 - AssertionError: assert [{'password'...
FAILED test_reg_1.py::test_search_and_buy_product_insufficient_balance - asse...
FAILED test_reg_1.py::test_success_one_item_checkout - assert 'Blender added ...
FAILED test_reg_1.py::test_success_multiple_item_checkout - assert 'Vaccuum C...
FAILED test_reg_1.py::test_cancel_logout_forgotten_checkout - assert 'Blender...
FAILED test_reg_1.py::test_remove_item - StopIteration
FAILED test_reg_1.py::test_remove_item_no_items - StopIteration
FAILED test_reg_1.py::test_remove_item_checkout - StopIteration
ERROR test_reg_1.py::test_load_change_mock_csv
ERROR test_reg_1.py::test_load_change_mock_csv_val_error
=================== 9 failed, 36 passed, 2 errors in 0.54s ====================
